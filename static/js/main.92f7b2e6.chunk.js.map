{"version":3,"sources":["pages/Album.js","redux/actions.js","redux/types.js","components/Alert.js","components/time.js","components/PostForm/InputTitle.jsx","components/PostForm/InputMessage.jsx","components/PostForm/InputDownloadImg.jsx","components/PostForm/PostForm.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","pages/PostMen.js","pages/AuthPage.js","pages/Menu.js","components/Profile/InputName.jsx","pages/Settings.js","components/NavBar.js","App.js","routes.js","serviceWorker.js","redux/reducers/postsReducer.js","redux/reducers/appReducer.js","redux/reducers/profileReducer.js","redux/reducers/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["Album","className","showAlert","text","dispatch","type","payload","setTimeout","Alert","role","timer","now","Date","month","getMonth","getDate","getHours","getMinutes","value","onChange","htmlFor","id","name","successSelectFile","aria-describedby","PostForm","props","submitHandler","e","preventDefault","state","title","messagePost","fileImg","trim","newPost","time","toString","createPost","setState","changeInputHandler","persist","prev","target","changeMessagePostHandler","successDownloadImgHandler","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","a","files","Main","then","catch","console","log","onSubmit","this","alert","InputTitle","InputMessage","InputDownloadImg","React","Component","mapDispatchToProps","post","connect","app","style","maxWidth","src","alt","length","href","syncPosts","posts","map","Post","key","Loader","useDispatch","useSelector","fetchedPosts","loading","onClick","PostMen","FetchedPosts","AuthPage","placeholder","marginRight","Menu","Settings","newDataUser","upgradeProfile","firstname","InputName","profileData","profile","NavBar","padding","to","App","routes","isAuthenticated","path","exact","useRoutes","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","concat","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","__REDUX_DEVTOOLS_EXTENSION__","run","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.92f7b2e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"materialize-css\";\r\n\r\nfunction Album() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>It`s Album</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Album;\r\n","import {\r\n    CREATE_POST,\r\n    UPGRADE_PROFILE,\r\n    SHOW_LOADER,\r\n    HIDE_LOADER,\r\n    SHOW_ALERT,\r\n    HIDE_ALERT,\r\n    REQUEST_POSTS,\r\n} from \"./types\";\r\n\r\nexport function createPost(post) {\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post,\r\n    };\r\n}\r\n\r\nexport function upgradeProfile(profileData) {\r\n    return {\r\n        type: UPGRADE_PROFILE,\r\n        payload: profileData,\r\n    };\r\n}\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER,\r\n    };\r\n}\r\n\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER,\r\n    };\r\n}\r\n\r\nexport function showAlert(text) {\r\n    return (dispatch) => {\r\n        dispatch({ type: SHOW_ALERT, payload: text });\r\n\r\n        setTimeout(() => {\r\n            dispatch(hideAlert());\r\n        }, 3000);\r\n    };\r\n}\r\n\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT,\r\n    };\r\n}\r\n\r\nexport function fetchPosts() {\r\n    return {\r\n        type: REQUEST_POSTS,\r\n    };\r\n}\r\n","export const CREATE_POST = \"POST/CREATE_POST\";\r\nexport const FETCH_POSTS = \"POST/FETCH_POSTS\";\r\nexport const REQUEST_POSTS = \"POST/REQUEST_POSTS\";\r\nexport const SHOW_LOADER = \"APP/SHOW_LOADER\";\r\nexport const HIDE_LOADER = \"APP/HIDE_LOADER\";\r\nexport const SHOW_ALERT = \"APP/SHOW_ALERT\";\r\nexport const HIDE_ALERT = \"APP/HIDE_ALERT\";\r\nexport const UPGRADE_PROFILE = \"PROFILE/UPGRADE_PROFILE\";\r\n","import React from \"react\";\r\n\r\nexport const Alert = ({ text }) => (\r\n    <div className=\"alert alert-warning\" role=\"alert\">\r\n        {text}\r\n    </div>\r\n);\r\n","export function timer() {\r\n    const now = new Date();\r\n\r\n    const month = now.getMonth() + 1;\r\n    const day = now.getDate();\r\n    const hours = now.getHours();\r\n    const minutes = now.getMinutes();\r\n\r\n    return day + \".0\" + month + \" \" + hours + \":\" + minutes;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default ({ value, onChange }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Заголовок поста</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"title\"\r\n                    value={value}\r\n                    name=\"title\"\r\n                    onChange={onChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default ({ value, onChange }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"messagePost\">Сообщение поста</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"messagePost\"\r\n                    value={value}\r\n                    name=\"messagePost\"\r\n                    onChange={onChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport \"./PostForm.css\";\r\n\r\nexport default ({ onChange, successSelectFile }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"messagePost\">Добавить изображение</label>\r\n\r\n                <div className=\"input-group mb-3\">\r\n                    <div className=\"custom-file\">\r\n                        <input\r\n                            type=\"file\"\r\n                            className=\"custom-file-input\"\r\n                            id=\"inputGroupFile01\"\r\n                            aria-describedby=\"inputGroupFileAddon01\"\r\n                            onChange={onChange}\r\n                        />\r\n                        <label\r\n                            className=\"custom-file-label\"\r\n                            htmlFor=\"inputGroupFile01\"\r\n                        >\r\n                            {successSelectFile\r\n                                ? successSelectFile\r\n                                : \"Выберите файл\"}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost, showAlert } from \"../../redux/actions\";\r\nimport { Alert } from \"../Alert\";\r\nimport { timer } from \"../time\";\r\nimport InputTitle from \"./InputTitle\";\r\nimport InputMessage from \"./InputMessage\";\r\nimport InputDownloadImg from \"./InputDownloadImg\";\r\n// import \"./PostForm.css\";\r\n\r\nclass PostForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\",\r\n            messagePost: \"\",\r\n            successSelectFile: \"\",\r\n            fileImg: \"\",\r\n        };\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { title, messagePost, successSelectFile, fileImg } = this.state;\r\n\r\n        if (!title.trim() || !messagePost.trim() || !successSelectFile.trim()) {\r\n            return this.props.showAlert(\"Все поля должны быть заполнены\");\r\n        }\r\n\r\n        const newPost = {\r\n            title,\r\n            messagePost,\r\n            time: timer(),\r\n            successSelectFile,\r\n            fileImg,\r\n            id: Date.now().toString(),\r\n        };\r\n\r\n        this.props.createPost(newPost);\r\n        this.setState({ title: \"\", messagePost: \"\", successSelectFile: \"\" });\r\n    };\r\n\r\n    changeInputHandler = (e) => {\r\n        e.persist();\r\n        this.setState((prev) => ({\r\n            ...prev,\r\n            ...{ [e.target.name]: e.target.value },\r\n        }));\r\n    };\r\n\r\n    changeMessagePostHandler = (e) => {\r\n        e.persist();\r\n        this.setState((prev) => ({\r\n            ...prev,\r\n            ...{ [e.target.name]: e.target.value },\r\n        }));\r\n    };\r\n\r\n    successDownloadImgHandler = (e) => {\r\n        e.persist();\r\n\r\n        const toBase64 = (file) =>\r\n            new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                reader.onload = () => resolve(reader.result);\r\n                reader.onerror = (error) => reject(error);\r\n            });\r\n\r\n        async function Main() {\r\n            const file = e.target.files[0];\r\n            return await toBase64(file);\r\n        }\r\n\r\n        Main()\r\n            .then((result) => {\r\n                this.setState((prev) => ({\r\n                    ...prev,\r\n                    ...{\r\n                        successSelectFile: e.target.files[0].name,\r\n                        fileImg: result,\r\n                    },\r\n                }));\r\n            })\r\n            .catch(console.log);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                {this.props.alert && <Alert text={this.props.alert} />}\r\n\r\n                <InputTitle\r\n                    value={this.state.title}\r\n                    onChange={this.changeInputHandler}\r\n                />\r\n\r\n                <InputMessage\r\n                    value={this.state.messagePost}\r\n                    onChange={this.changeMessagePostHandler}\r\n                />\r\n\r\n                <InputDownloadImg\r\n                    onChange={this.successDownloadImgHandler}\r\n                    successSelectFile={this.state.successSelectFile}\r\n                />\r\n\r\n                <button className=\"btn btn-success\" type=\"submit\">\r\n                    Создать\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost,\r\n    showAlert,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    alert: state.app.alert,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);\r\n","import React from \"react\";\r\n\r\nexport default ({ post }) => {\r\n    return (\r\n        <div className=\"card\" style={{ maxWidth: 18 + \"rem\" }} className=\"pt-3\">\r\n            <img\r\n                src={post.fileImg}\r\n                className=\"card-img-top\"\r\n                alt={post.fileImg}\r\n            />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{post.title}</h5>\r\n                <p className=\"card-text\">\r\n                    {post.messagePost}\r\n                    <footer className=\"footer pt-2\">\r\n                        <cite title=\"Source Title\">{post.time}</cite>\r\n                    </footer>\r\n                </p>\r\n                {post.messagePost.length > 500 && (\r\n                    <a href=\"/#\" className=\"btn btn-primary\">\r\n                        Читать дальше\r\n                    </a>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Posts = ({ syncPosts }) => {\r\n    if (!syncPosts.length) {\r\n        return <p className=\"text-center\">Постов пока нет</p>;\r\n    }\r\n    return syncPosts.map((post) => <Post post={post} key={post.id} />);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        syncPosts: state.posts.posts,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Posts);\r\n","import React from \"react\";\r\n\r\nexport const Loader = () => (\r\n    <div className=\"spinner-border text-danger\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n);\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchPosts } from \"../redux/actions\";\r\nimport { Loader } from \"./Loader\";\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector((state) => state.posts.fetchedPosts);\r\n    const loading = useSelector((state) => state.app.loading);\r\n\r\n    if (loading) {\r\n        return <Loader />;\r\n    }\r\n\r\n    if (!posts.length) {\r\n        return (\r\n            <button\r\n                className=\"btn btn-primary\"\r\n                onClick={() => dispatch(fetchPosts())}\r\n            >\r\n                Загрузить\r\n            </button>\r\n        );\r\n    }\r\n    return posts.map((post) => <Post post={post} key={post.id} />);\r\n};\r\n","import React from \"react\";\r\nimport \"materialize-css\";\r\nimport PostForm from \"../components/PostForm/PostForm\";\r\nimport Posts from \"../components/Posts\";\r\nimport FetchedPosts from \"../components/FetchedPosts\";\r\n\r\nconst PostMen = () => {\r\n    return (\r\n        <div className=\"container pt-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <PostForm />\r\n                </div>\r\n            </div>\r\n            <div className=\"row pt-3\">\r\n                <div className=\"col\">\r\n                    <Posts />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h2>Асинхронные посты</h2>\r\n                    <FetchedPosts />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostMen;\r\n","import React from \"react\";\r\nimport \"materialize-css\";\r\n\r\nfunction AuthPage() {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s6 offset-s3\">\r\n                <h1>PostMen</h1>\r\n                <div className=\"card blue darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">Авторизация</span>\r\n                        <div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    placeholder=\"Введите email\"\r\n                                    id=\"email\"\r\n                                    type=\"text\"\r\n                                    name=\"email\"\r\n                                    className=\"yellow-input\"\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    placeholder=\"Введите пароль\"\r\n                                    id=\"password\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    className=\"yellow-input\"\r\n                                />\r\n                                <label htmlFor=\"password\">Пароль</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <button\r\n                            className=\"btn yellow darken-4\"\r\n                            style={{ marginRight: 10 }}\r\n                        >\r\n                            Войти\r\n                        </button>\r\n                        <button className=\"btn grey lighten-1 black-text\">\r\n                            Регистрация\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthPage;\r\n","import React from \"react\";\r\nimport \"materialize-css\";\r\n\r\nfunction Menu() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>It`s Menu</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div className=\"form-group pb-1\">\r\n            <label htmlFor=\"title\">Ваше имя</label>\r\n            <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"name\"\r\n                value={props.value}\r\n                name=\"name\"\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { upgradeProfile, showAlert } from \"../redux/actions\";\r\nimport { Alert } from \"../components/Alert\";\r\nimport InputName from \"../components/Profile/InputName\";\r\n\r\nclass Settings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n        };\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { name } = this.state;\r\n\r\n        if (!name.trim()) {\r\n            return this.props.showAlert(\"Все поля должны быть заполнены\");\r\n        }\r\n\r\n        const newDataUser = {\r\n            name,\r\n        };\r\n\r\n        this.props.upgradeProfile(newDataUser);\r\n        this.setState({ name: \"\" });\r\n    };\r\n\r\n    changeInputHandler = (e) => {\r\n        e.persist();\r\n\r\n        this.setState((prev) => ({\r\n            ...prev,\r\n            ...{ [e.target.name]: e.target.value },\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        console.log(\"prop =\", this.props);\r\n        let firstname;\r\n        let propsFirstname = this.props.firstname;\r\n\r\n        if (propsFirstname.length !== 0) {\r\n            firstname = this.props.firstname[0].name;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container pt-4\">\r\n                <form onSubmit={this.submitHandler}>\r\n                    {this.props.alert && <Alert text={this.props.alert} />}\r\n\r\n                    <InputName\r\n                        value={this.state.name}\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n\r\n                    <button className=\"btn btn-warning\" type=\"submit\">\r\n                        Обновить\r\n                    </button>\r\n                </form>\r\n\r\n                {firstname && (\r\n                    <div className=\"jumbotron jumbotron-fluid pt-3\">\r\n                        <div className=\"container\">\r\n                            <h1 className=\"display-4\">Твои данные</h1>\r\n                            <p className=\"lead\">Имя - {firstname}</p>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    upgradeProfile,\r\n    showAlert,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    alert: state.app.alert,\r\n    firstname: state.profile.profile,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const NavBar = () => {\r\n    return (\r\n        <nav>\r\n            <div\r\n                className=\"nav-wrapper blue darken-1\"\r\n                style={{ padding: \"0 2rem\" }}\r\n            >\r\n                <span className=\"brand-logo\">PostMen</span>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li>\r\n                        <NavLink to=\"/settings\">Настройки</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/postmen\">Посты</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/album\">Альбом</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/menu\">Меню</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"/\">Выйти</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n","import React from \"react\";\nimport \"materialize-css\";\nimport { useRoutes } from \"./routes\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { NavBar } from \"./components/NavBar\";\n\nconst App = () => {\n    const routes = useRoutes(true);\n    const isAuthenticated = 1;\n    return (\n        <Router>\n            {isAuthenticated === 1 && <NavBar />}\n            <div className=\"container\">{routes}</div>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Album from \"./pages/Album\";\r\nimport PostMen from \"./pages/PostMen\";\r\nimport AuthPage from \"./pages/AuthPage\";\r\nimport Menu from \"./pages/Menu\";\r\nimport Settings from \"./pages/Settings\";\r\n\r\nexport const useRoutes = (isAuthenticated) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/album\" exact>\r\n                    <Album />\r\n                </Route>\r\n                <Route path=\"/postmen\" exact>\r\n                    <PostMen />\r\n                </Route>\r\n                <Route path=\"/menu\" exact>\r\n                    <Menu />\r\n                </Route>\r\n                <Route path=\"/settings\" exact>\r\n                    <Settings />\r\n                </Route>\r\n                <Redirect to=\"/menu\" />\r\n            </Switch>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <AuthPage />\r\n            </Route>\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE_POST, FETCH_POSTS } from \"../types\";\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    fetchedPosts: [],\r\n};\r\n\r\n//Pure Functions\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_POST:\r\n            return { ...state, posts: state.posts.concat([action.payload]) };\r\n        case FETCH_POSTS:\r\n            return { ...state, fetchedPosts: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {\r\n    SHOW_LOADER,\r\n    HIDE_LOADER,\r\n    SHOW_ALERT,\r\n    HIDE_ALERT,\r\n} from \"../../redux/types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    alert: null,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return { ...state, loading: true };\r\n        case HIDE_LOADER:\r\n            return { ...state, loading: false };\r\n        case SHOW_ALERT:\r\n            return { ...state, alert: action.payload };\r\n        case HIDE_ALERT:\r\n            return { ...state, alert: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { UPGRADE_PROFILE } from \"../types\";\r\n\r\nconst initialState = {\r\n    profile: [],\r\n};\r\n\r\nexport const profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPGRADE_PROFILE:\r\n            return {\r\n                ...state,\r\n                // profile: state.profile.concat([action.payload]),\r\n                profile: [action.payload],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { postsReducer } from \"../reducers/postsReducer\";\r\nimport { appReducer } from \"../reducers/appReducer\";\r\nimport { profileReducer } from \"../reducers/profileReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n});\r\n","import { CREATE_POST } from \"./types\";\r\nimport { showAlert } from \"./actions\";\r\n\r\nconst forbidden = [\"fuck\", \"php\", \"lol\"];\r\n\r\nexport function forbiddenWordsMiddleware({ dispatch }) {\r\n    return function (next) {\r\n        return function (action) {\r\n            if (action.type === CREATE_POST) {\r\n                const found = forbidden.filter((w) =>\r\n                    action.payload.title.includes(w)\r\n                );\r\n                if (found.length) {\r\n                    return dispatch(showAlert(\"you is spamer\"));\r\n                }\r\n            }\r\n            return next(action);\r\n        };\r\n    };\r\n}\r\n","import { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { FETCH_POSTS, REQUEST_POSTS } from \"./types\";\r\nimport { showLoader, hideLoader, showAlert } from \"./actions\";\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, sagaWorker);\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n        yield put(showLoader());\r\n        const payload = yield call(fetchPosts);\r\n        yield put({ type: FETCH_POSTS, payload });\r\n        yield put(hideLoader());\r\n    } catch (e) {\r\n        yield put(showAlert(\"Ошибка на сервере. Попробуйте ещё раз...\"));\r\n        yield put(hideLoader());\r\n    }\r\n}\r\n\r\nasync function fetchPosts() {\r\n    const response = await fetch(\r\n        \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n    );\r\n    return await response.json();\r\n}\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { forbiddenWordsMiddleware } from \"./redux/middleware\";\nimport { sagaWatcher } from \"./redux/sagas\";\nimport \"./index.css\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk, forbiddenWordsMiddleware, saga),\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nsaga.run(sagaWatcher);\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nrender(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}